# -*- coding: utf-8 -*-
"""SpellChecker.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1OVeP3I0cCCLuKE4l4P9Ub-ylrdXAiuxv
"""

# lavenstein distance
import os


def edit_distance(a, b):
    n = len(a) + 1
    m = len(b) + 1
    dp = [[-1 for x in range(m)] for y in range(n)]

    for i in range(m):
        dp[0][i] = i
    for i in range(n):
        dp[i][0] = i
    for i in range(1, n):
        for j in range(1, m):
            if (a[i - 1] == b[j - 1]):
                c = 0
            else:
                c = 1
            dp[i][j] = min(1 + dp[i - 1][j], 1 + dp[i][j - 1], c + dp[i - 1][j - 1])
    return dp[n - 1][m - 1]


def space(n):
    r = ' '
    for i in range(n):
        if i == 0:
            r = ' '
        else:
            r = r + ' '
    return r


class node:
    def __init__(self, wrd, cc=1):
        self.ptr = {}
        self.word = wrd
        self.cnt = cc

    def addNode(self, key, nd):
        if key in self.ptr:
            print("key already exist!", key)
        self.ptr[key] = nd

    def insert(self, str, cnt):
        key = edit_distance(self.word, str)
        if key > 0:
            if key in self.ptr:
                self.ptr[key].insert(str, cnt)
            else:
                nn = node(str, cnt)
                self.ptr[key] = nn

    def printalltofile(self, file):
        file.write(self.word)
        file.write(" ")
        file.write(str(self.cnt))
        file.write('\n')
        # file.write("start")
        # file.write('\n')
        for x in self.ptr:
            file.write(str(x))
            file.write('\n')
            self.ptr[x].printalltofile(file)
        file.write("end")
        file.write('\n')

    def insertfromfile(self, lines, li, ln):  # file is consistent
        # li+=1
        # start
        while li < ln:
            x = lines[li].split()
            # print(self.word,x);
            if (x[0] == "end"):
                break
            ds = int(x[0])
            li += 1
            x = lines[li].split()
            nn = node(x[0], int(x[1]))
            self.ptr[ds] = nn
            li = nn.insertfromfile(lines, li + 1, ln)

        return li + 1

    def printall(self, cnt):
        print(space(cnt), self.word, self.cnt)
        for x in self.ptr:
            print(space(cnt), x)
            self.ptr[x].printall(cnt + 2)

    def query(self, lst, str, d):
        key = edit_distance(self.word, str)
        # print(str,self.word, key)
        if key <= d:
            lst.append([self.word, int(self.cnt)])
            # print("add",self.word,self.cnt)
        # print("range is ",key-d,key+d)
        for x in range(key - d, key + d):
            # print(self.word, "then ",x)
            if x in self.ptr:
                lst = self.ptr[x].query(lst, str, d)
        return lst


def insertDictionary(head, filename):
    file = open(filename, "r", encoding="utf-8")
    i = 0  # comment it please... used to test
    for line in file:
        # if "%" in line:
        #  continue
        i += 1
        if (i > 10):
            break
        if (len(line.split()) == 0):
            continue
        word = findd(line)
        if len(word) == 2:
            head.insert(word[0], int(word[1]))  # add count if you have
        else:
            head.insert(word[0])
    file.close()


def inserttreefromfile(filename):
    with open(filename, "r", encoding="utf-8") as f:
        lines = f.read().splitlines()
    li = 0
    ln = len(lines)
    x = lines[0].split()
    head = node(x[0], x[1])
    li = head.insertfromfile(lines, 1, len(lines))
    return head


def punctuation(str):
    if (str == ' ' or str == ',' or str == ';' or str == '!' or str == '।' or str == '-' or str == '?'):
        return True
    else:
        return False


def purify(str):
    n = len(str)
    ls = []
    ss = ""
    for i in range(n):
        if (punctuation(str[i])):
            if (len(ss) > 0):
                ls.append(ss)
            ss = str[i]
            ls.append(ss)
            ss = ""
        else:
            ss = ss + str[i]
    if (len(ss) > 0):
        ls.append(ss)
    return ls


def spellcheck(head, str, k):
    words = purify(str)
    sentence = ""
    for word in words:
        if (punctuation(word)):
            sentence += word
            continue
        ls = head.query([], word, k)
        # print(word, ls)
        ls = sorted(ls, key=lambda l: l[1], reverse=True)
        ls = getCorrectWord(ls, word)
        return ls


def findd(line):
    word = line.split()
    tt = word
    for i in range(len(word)):
        if word[i] == ":":
            word = word[i + 1:]
            break
    if (len(word) < 2):
        print(tt, word)
    # word[1]=word[1][1:-1]
    return word[0:2]


def insertDictionary(head, filename):
    file = open(filename, "r", encoding="utf-8")
    # i=0
    for line in file:
        # i+=1
        # if i>10:
        #    break
        if (len(line.split()) == 0):
            continue
        word = findd(line)
        if len(word) == 2:
            head.insert(word[0], int(word[1]))  # add count if you have
        else:
            head.insert(word[0], 1)
    file.close()


def getCorrectWord(lst, str):
    res = []
    # print(lst)
    if (len(lst) == 0):
        return []
    for x in lst:
        if x[0] == str:
            res.append(x[0])
    for x in lst:
        if edit_distance(x[0], str) == 1:
            res.append(x[0])
            if (len(res) >= 5):
                break
    for x in lst:
        if len(res) >= 5:
            break
        if edit_distance(x[0], str) == 2:
            res.append(x[0])
            if (len(res) >= 5):
                break

    return res


def checkParagraph(paragraph, head):  # paragraph is a list of lines
    ret = []
    wi = -1
    words = purify(paragraph)
    n = len(words)
    for i in range(n):
        str = words[i]
        if (punctuation(str)):  # how punctuation is treated... i am taking them as words
            # ret[wi]="Ok"
            continue
        wi += 1
        ls = spellcheck(head, str, 2)
        if (len(ls) > 0 and ls[0] == str):
            ret.append("OK")
        else:
            ret.append(ls)
    return ret


def accuracy_test(head, filename):
    tot = 0
    top = 0
    five = 0
    file = open(filename, "r", encoding="utf-8")
    for line in file:
        words = line.split()
        print(words)
        ls = spellcheck(head, words[0], 2)
        print(ls)
        tot += 1
        for i in range(len(ls)):
            if (ls[i] == words[1]):
                if (i == 0):
                    top += 1
                    five += 1
                else:
                    five += 1
        # ind=int(input("which one match: [1-5], -1 if none "))

    file.close()
    print("First suggestion match accuracy: ", top / tot)
    print("top five suggestion match accuracy: ", five / tot)


'''
while(True):
    str=input()
    if(str=="stop"):
        break
    spellcheck(head,str,2)
'''

# head=node("আমি")
# insertDictionary(head,"nwords.txt")
# print("insert done")
# head.printall(0)

'''
head=node("আমি")
insertDictionary(head,"nwords.txt")
#head.printall(0)
#accuracy_test(head,"test.txt")
'''

'''
file = open("bk_tree.txt", "w",encoding="utf-8")
head.printalltofile(file)
#head.printall(0)
file.close()
'''

'''
file=open("bk_tree.txt","r",encoding="utf-8")
for x in file:
  print(x)
file.close()
'''


# keep it if you are using google colab
# from google.colab import files
# files.upload('bk_tree.txt')
def filepath(file):
    return os.path.join(os.path.dirname(__file__), file)


_head = inserttreefromfile(filepath('bk_tree.txt'))
# head.printall(0)
print("tree loaded")
# para = '''আমাড় সোনর বাংল,
# আমি তোমাক ভলবাসি'''
# print(checkParagraph(para))

# accuracy_test(head,"test.txt")
