# -*- coding: utf-8 -*-
"""hmm6-test1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/0BwTkkZ0TDXq-bW1vLXllVl85R2Z1Rmg1THVzcFlBdjYtc19V
"""
import json
import os

import pandas as pd
import numpy as np
from collections import defaultdict

def filepath(file):
    return os.path.join(os.path.dirname(__file__), file)


def trainingdata():
    ##%debug
    totallines = 0
    filename = filepath("data.txt")

    tagsdic = defaultdict(lambda: defaultdict(lambda: defaultdict(lambda: 0.008)))
    wordsdic = defaultdict(lambda: defaultdict(lambda: 0.008))
    tagspertotal = defaultdict(lambda: 1)

    with open(filename) as file1:
        lines = file1.readlines()
        lines1 = lines[0:2800]

        # work over each line
        for line in lines1:
            words = line.strip().split(' ')
            tag1 = 'start*'
            tag2 = 'start*'

            if words[0] == '': continue
            # work over each word in the line
            for word in words:
                index1 = word.split('\\')

                # debug
                if len(index1) < 2:
                    continue

                word1 = index1[0]
                tag3 = index1[1]  # tag3 represents current tag

                # debug
                # if tag3 in ['?', '']:
                #     print(word, end='   ')
                #     print(line)

                if (tag3 == 'PU' or tag3 == 'R'):
                    continue

                wordsdic[word1][tag3] = wordsdic[word1][tag3] + 1

                tagsdic[tag1][tag2][tag3] = tagsdic[tag1][tag2][tag3] + 1

                tagspertotal[tag3] = tagspertotal[tag3] + 1

                tag1, tag2 = tag2, tag3

                # work over each word in the line

            tag3 = 'STOP'
            tagsdic[tag1][tag2][tag3] = tagsdic[tag1][tag2][tag3] + 1

            totallines += 1
            # work over each line

    return tagsdic, wordsdic, tagspertotal


def notinwordsdic(word, tag1, tag2, index):
    maxi = 0
    maxtag = 'sth'

    for tag3 in tagsdic[tag1][tag2]:
        if (tagsdic[tag1][tag2][tag3] > maxi):
            maxi = tagsdic[tag1][tag2][tag3]
            maxtag = tag3

    return maxtag


def nopairtag(word, tag1, tag2, index):
    maxi = 0
    maxtag = 'sth'
    for tag4 in wordsdic[word]:
        if (wordsdic[word][tag4] > maxi):
            maxi = wordsdic[word][tag4]
            maxtag = tag4
    return maxtag


# CONTAINS THE FUNCTIONS - FINDWORDTAG() AND FINDSUM()


def findsum(word):
    sum1 = 0
    for key in wordsdic[word]:
        sum1 += wordsdic[word][key]

    return sum1


def findsumtags(tag1, tag2):
    sum1 = 0
    for key in tagsdic[tag1][tag2]:
        sum1 += tagsdic[tag1][tag2][key]

    return sum1


def findwordtag(word, tag1, tag2, index):
    if (word in wordsdic):
        sum1 = findsum(word)  # num of times the word is available in the data

        sum2 = findsumtags(tag1, tag2)
        if (sum2 == 0):
            maxtag = nopairtag(word, tag1, tag2, index)
            return maxtag

        maxprob = -1
        maxtag = 'hello'

        # check each of the tags that is possible for this current word
        for key in wordsdic[word]:
            # here key is the current tag that is being checked
            prob1 = (wordsdic[word][key]) / tagspertotal[key]  # sum1 or tagspertotal[key]
            prob2 = (tagsdic[tag1][tag2][key]) / sum2
            prob3 = prob1 * prob2
            if (prob3 > maxprob):
                maxprob = prob3
                maxtag = key

        return maxtag
    else:  # word not in wordsdic
        maxtag = notinwordsdic(word, tag1, tag2, index)
        if (maxtag == 'notaghello'):
            print("no two tags")

        return maxtag


def findtags(line):
    # find the tag sequence of the given tag sequence
    result = []  # the final result or tag sequence will be kept here
    words = line.strip().split(' ')
    tag1 = 'start*'
    tag2 = 'start*'
    current1 = 0
    for word in words:
        tag3 = findwordtag(word, tag1, tag2, current1)
        result.append(tag3)
        tag1, tag2 = tag2, tag3
        # print( result[current1] , end= '  ')
        current1 += 1
    return result


if not os.path.isfile(filepath('tagsdic')):
    print("training")
    tdic, wdic, tpertotal = trainingdata()
    print(len(tdic))
    with open(filepath('tagsdic'), 'w') as tfile:
        json.dump(tdic, tfile)

    with open(filepath('wordsdic'), 'w') as wfile:
        json.dump(wdic, wfile)

    with open(filepath('tagspertotal'), 'w') as totalfile:
        json.dump(tpertotal, totalfile)

else:
    with open(filepath('tagsdic'), 'r') as tfile:
        tagsdic = json.load(tfile)

    with open(filepath('wordsdic'), 'r') as wfile:
        wordsdic = json.load(wfile)

    with open(filepath('tagspertotal'), 'r') as totalfile:
        tagspertotal = json.load(totalfile)

